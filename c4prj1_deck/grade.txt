Grading at Tue Oct  1 20:40:52 UTC 2019
Compiling deck.c -> deck.o
Compiling eval.c -> eval.o
Compiling cards.c -> cards.o
Linking eval.o, deck.o, cards.o, and our tester
Testing free_deck(deck_t *)
- Test passed
Testing add_card_to(deck_t *, card_t)
- Test passed
Testing add_empty_card(deck_t *)
- Test passed
Testing make_deck_exclude(deck_t *)
- Test passed
Testing build_remaining_deck(deck_t **, size_t)
Testing with 1 hand
Testing with 2 hands
Testing with 3 hands
Testing with 4 hands
Testing with 5 hands
Testing with 6 hands
- Test passed
Testing get_match_count(deck_t *)
index: 0,  match[index]: 1
hand->cards[i]->value = 14 , hand->cards[i+1]->value = 14  index: 0,  match[index]: 1
timeout: the monitored command dumped core
Valgrind reported errors:
==384== Memcheck, a memory error detector
==384== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==384== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==384== Command: ./tester gmc
==384== Parent PID: 383
==384== 
==384== Invalid read of size 8
==384==    at 0x401B9A: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x403979: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x400AB8: main (in /graderhome/work/c4prj1_deck/tester)
==384==  Address 0x52042d0 is 0 bytes after a block of size 16 alloc'd
==384==    at 0x4C2FD5F: realloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==384==    by 0x403826: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x400AB8: main (in /graderhome/work/c4prj1_deck/tester)
==384== 
==384== Invalid read of size 4
==384==    at 0x401B9D: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x403979: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x400AB8: main (in /graderhome/work/c4prj1_deck/tester)
==384==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==384== 
==384== 
==384== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==384==  Access not within mapped region at address 0x0
==384==    at 0x401B9D: get_match_counts (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x403979: check_get_match_count (in /graderhome/work/c4prj1_deck/tester)
==384==    by 0x400AB8: main (in /graderhome/work/c4prj1_deck/tester)
==384==  If you believe this happened as a result of a stack
==384==  overflow in your program's main thread (unlikely but
==384==  possible), you can try to increase the size of the
==384==  main thread stack using the --main-stacksize= flag.
==384==  The main thread stack size used in this run was 8388608.
==384== 
==384== HEAP SUMMARY:
==384==     in use at exit: 112 bytes in 10 blocks
==384==   total heap usage: 15 allocs, 5 frees, 4,232 bytes allocated
==384== 
==384== LEAK SUMMARY:
==384==    definitely lost: 8 bytes in 1 blocks
==384==    indirectly lost: 0 bytes in 0 blocks
==384==      possibly lost: 0 bytes in 0 blocks
==384==    still reachable: 104 bytes in 9 blocks
==384==         suppressed: 0 bytes in 0 blocks
==384== Rerun with --leak-check=full to see details of leaked memory
==384== 
==384== For counts of detected and suppressed errors, rerun with: -v
==384== ERROR SUMMARY: 2 errors from 2 contexts (suppressed: 0 from 0)

Overall Grade: B
