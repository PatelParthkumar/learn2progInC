Grading at Wed Aug 28 20:38:31 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==325== Memcheck, a memory error detector
==325== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==325== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==325== Command: ./test-eval inp.1.txt
==325== Parent PID: 324
==325== 
==325== Use of uninitialised value of size 8
==325==    at 0x400C0F: print_hand (deck.c:10)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Use of uninitialised value of size 8
==325==    at 0x400C29: print_hand (deck.c:11)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x4033A9: suit_letter (cards.c:68)
==325==    by 0x4033FE: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x40332C: value_letter (cards.c:49)
==325==    by 0x40340D: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x403346: value_letter (cards.c:53)
==325==    by 0x40340D: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x403355: value_letter (cards.c:56)
==325==    by 0x40340D: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x403364: value_letter (cards.c:57)
==325==    by 0x40340D: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x403373: value_letter (cards.c:58)
==325==    by 0x40340D: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Conditional jump or move depends on uninitialised value(s)
==325==    at 0x403382: value_letter (cards.c:59)
==325==    by 0x40340D: print_card (cards.c:77)
==325==    by 0x400C3A: print_hand (deck.c:12)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325== 
==325== Invalid read of size 4
==325==    at 0x400C0F: print_hand (deck.c:10)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==325== 
==325== 
==325== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==325==  Access not within mapped region at address 0x400001102
==325==    at 0x400C0F: print_hand (deck.c:10)
==325==    by 0x402F11: describe_hand (test-eval.c:74)
==325==    by 0x4030F1: main (test-eval.c:116)
==325==  If you believe this happened as a result of a stack
==325==  overflow in your program's main thread (unlikely but
==325==  possible), you can try to increase the size of the
==325==  main thread stack using the --main-stacksize= flag.
==325==  The main thread stack size used in this run was 8388608.
==325== 
==325== HEAP SUMMARY:
==325==     in use at exit: 896 bytes in 18 blocks
==325==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==325== 
==325== LEAK SUMMARY:
==325==    definitely lost: 0 bytes in 0 blocks
==325==    indirectly lost: 0 bytes in 0 blocks
==325==      possibly lost: 0 bytes in 0 blocks
==325==    still reachable: 896 bytes in 18 blocks
==325==         suppressed: 0 bytes in 0 blocks
==325== Rerun with --leak-check=full to see details of leaked memory
==325== 
==325== For counts of detected and suppressed errors, rerun with: -v
==325== Use --track-origins=yes to see where uninitialised values come from
==325== ERROR SUMMARY: 18 errors from 10 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==330== Memcheck, a memory error detector
==330== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==330== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==330== Command: ./test-eval inp.2.txt
==330== Parent PID: 329
==330== 
==330== Invalid read of size 4
==330==    at 0x40224A: compare_hands (eval.c:301)
==330==    by 0x403166: main (test-eval.c:124)
==330==  Address 0x5208438 is 0 bytes after a block of size 8 alloc'd
==330==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==330==    by 0x401190: add_card_to (deck-c4.c:30)
==330==    by 0x403904: hand_from_string (input.c:49)
==330==    by 0x40313A: main (test-eval.c:122)
==330== 
==330== Invalid read of size 4
==330==    at 0x40225D: compare_hands (eval.c:301)
==330==    by 0x403166: main (test-eval.c:124)
==330==  Address 0x52088a8 is 0 bytes after a block of size 8 alloc'd
==330==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==330==    by 0x401190: add_card_to (deck-c4.c:30)
==330==    by 0x403904: hand_from_string (input.c:49)
==330==    by 0x40314F: main (test-eval.c:123)
==330== 
==330== Invalid read of size 4
==330==    at 0x40227B: compare_hands (eval.c:302)
==330==    by 0x403166: main (test-eval.c:124)
==330==  Address 0x5208438 is 0 bytes after a block of size 8 alloc'd
==330==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==330==    by 0x401190: add_card_to (deck-c4.c:30)
==330==    by 0x403904: hand_from_string (input.c:49)
==330==    by 0x40313A: main (test-eval.c:122)
==330== 
==330== Invalid read of size 4
==330==    at 0x40228E: compare_hands (eval.c:302)
==330==    by 0x403166: main (test-eval.c:124)
==330==  Address 0x52088a8 is 0 bytes after a block of size 8 alloc'd
==330==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==330==    by 0x401190: add_card_to (deck-c4.c:30)
==330==    by 0x403904: hand_from_string (input.c:49)
==330==    by 0x40314F: main (test-eval.c:123)
==330== 
==330== 
==330== HEAP SUMMARY:
==330==     in use at exit: 0 bytes in 0 blocks
==330==   total heap usage: 232 allocs, 232 frees, 13,028 bytes allocated
==330== 
==330== All heap blocks were freed -- no leaks are possible
==330== 
==330== For counts of detected and suppressed errors, rerun with: -v
==330== ERROR SUMMARY: 32 errors from 4 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==335== Memcheck, a memory error detector
==335== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==335== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==335== Command: ./test-eval inp.3.txt
==335== Parent PID: 334
==335== 
==335== Invalid read of size 4
==335==    at 0x40224A: compare_hands (eval.c:301)
==335==    by 0x403166: main (test-eval.c:124)
==335==  Address 0x5206e18 is 0 bytes after a block of size 8 alloc'd
==335==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==335==    by 0x401190: add_card_to (deck-c4.c:30)
==335==    by 0x403904: hand_from_string (input.c:49)
==335==    by 0x40313A: main (test-eval.c:122)
==335== 
==335== Invalid read of size 4
==335==    at 0x40225D: compare_hands (eval.c:301)
==335==    by 0x403166: main (test-eval.c:124)
==335==  Address 0x52071c8 is 0 bytes after a block of size 8 alloc'd
==335==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==335==    by 0x401190: add_card_to (deck-c4.c:30)
==335==    by 0x403904: hand_from_string (input.c:49)
==335==    by 0x40314F: main (test-eval.c:123)
==335== 
==335== Invalid read of size 4
==335==    at 0x40227B: compare_hands (eval.c:302)
==335==    by 0x403166: main (test-eval.c:124)
==335==  Address 0x5206e18 is 0 bytes after a block of size 8 alloc'd
==335==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==335==    by 0x401190: add_card_to (deck-c4.c:30)
==335==    by 0x403904: hand_from_string (input.c:49)
==335==    by 0x40313A: main (test-eval.c:122)
==335== 
==335== Invalid read of size 4
==335==    at 0x40228E: compare_hands (eval.c:302)
==335==    by 0x403166: main (test-eval.c:124)
==335==  Address 0x52071c8 is 0 bytes after a block of size 8 alloc'd
==335==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==335==    by 0x401190: add_card_to (deck-c4.c:30)
==335==    by 0x403904: hand_from_string (input.c:49)
==335==    by 0x40314F: main (test-eval.c:123)
==335== 
==335== 
==335== HEAP SUMMARY:
==335==     in use at exit: 0 bytes in 0 blocks
==335==   total heap usage: 544 allocs, 544 frees, 18,344 bytes allocated
==335== 
==335== All heap blocks were freed -- no leaks are possible
==335== 
==335== For counts of detected and suppressed errors, rerun with: -v
==335== ERROR SUMMARY: 80 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==340== Memcheck, a memory error detector
==340== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==340== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==340== Command: ./test-eval inp.4.txt
==340== Parent PID: 339
==340== 
==340== Invalid read of size 4
==340==    at 0x40224A: compare_hands (eval.c:301)
==340==    by 0x403166: main (test-eval.c:124)
==340==  Address 0x52082f8 is 0 bytes after a block of size 8 alloc'd
==340==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==340==    by 0x401190: add_card_to (deck-c4.c:30)
==340==    by 0x403904: hand_from_string (input.c:49)
==340==    by 0x40313A: main (test-eval.c:122)
==340== 
==340== Invalid read of size 4
==340==    at 0x40225D: compare_hands (eval.c:301)
==340==    by 0x403166: main (test-eval.c:124)
==340==  Address 0x5208768 is 0 bytes after a block of size 8 alloc'd
==340==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==340==    by 0x401190: add_card_to (deck-c4.c:30)
==340==    by 0x403904: hand_from_string (input.c:49)
==340==    by 0x40314F: main (test-eval.c:123)
==340== 
==340== Invalid read of size 4
==340==    at 0x40227B: compare_hands (eval.c:302)
==340==    by 0x403166: main (test-eval.c:124)
==340==  Address 0x52082f8 is 0 bytes after a block of size 8 alloc'd
==340==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==340==    by 0x401190: add_card_to (deck-c4.c:30)
==340==    by 0x403904: hand_from_string (input.c:49)
==340==    by 0x40313A: main (test-eval.c:122)
==340== 
==340== Invalid read of size 4
==340==    at 0x40228E: compare_hands (eval.c:302)
==340==    by 0x403166: main (test-eval.c:124)
==340==  Address 0x5208768 is 0 bytes after a block of size 8 alloc'd
==340==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==340==    by 0x401190: add_card_to (deck-c4.c:30)
==340==    by 0x403904: hand_from_string (input.c:49)
==340==    by 0x40314F: main (test-eval.c:123)
==340== 
==340== 
==340== HEAP SUMMARY:
==340==     in use at exit: 0 bytes in 0 blocks
==340==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==340== 
==340== All heap blocks were freed -- no leaks are possible
==340== 
==340== For counts of detected and suppressed errors, rerun with: -v
==340== ERROR SUMMARY: 64 errors from 4 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==345== Memcheck, a memory error detector
==345== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==345== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==345== Command: ./test-eval inp.5.txt
==345== Parent PID: 344
==345== 
==345== Use of uninitialised value of size 8
==345==    at 0x400C0F: print_hand (deck.c:10)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Use of uninitialised value of size 8
==345==    at 0x400C29: print_hand (deck.c:11)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x4033A9: suit_letter (cards.c:68)
==345==    by 0x4033FE: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x40332C: value_letter (cards.c:49)
==345==    by 0x40340D: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x403346: value_letter (cards.c:53)
==345==    by 0x40340D: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x403355: value_letter (cards.c:56)
==345==    by 0x40340D: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x403364: value_letter (cards.c:57)
==345==    by 0x40340D: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x403373: value_letter (cards.c:58)
==345==    by 0x40340D: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Conditional jump or move depends on uninitialised value(s)
==345==    at 0x403382: value_letter (cards.c:59)
==345==    by 0x40340D: print_card (cards.c:77)
==345==    by 0x400C3A: print_hand (deck.c:12)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345== 
==345== Invalid read of size 4
==345==    at 0x400C0F: print_hand (deck.c:10)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==345== 
==345== 
==345== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==345==  Access not within mapped region at address 0x400001102
==345==    at 0x400C0F: print_hand (deck.c:10)
==345==    by 0x402F11: describe_hand (test-eval.c:74)
==345==    by 0x4030F1: main (test-eval.c:116)
==345==  If you believe this happened as a result of a stack
==345==  overflow in your program's main thread (unlikely but
==345==  possible), you can try to increase the size of the
==345==  main thread stack using the --main-stacksize= flag.
==345==  The main thread stack size used in this run was 8388608.
==345== 
==345== HEAP SUMMARY:
==345==     in use at exit: 864 bytes in 16 blocks
==345==   total heap usage: 78 allocs, 62 frees, 10,080 bytes allocated
==345== 
==345== LEAK SUMMARY:
==345==    definitely lost: 0 bytes in 0 blocks
==345==    indirectly lost: 0 bytes in 0 blocks
==345==      possibly lost: 0 bytes in 0 blocks
==345==    still reachable: 864 bytes in 16 blocks
==345==         suppressed: 0 bytes in 0 blocks
==345== Rerun with --leak-check=full to see details of leaked memory
==345== 
==345== For counts of detected and suppressed errors, rerun with: -v
==345== Use --track-origins=yes to see where uninitialised values come from
==345== ERROR SUMMARY: 18 errors from 10 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==350== Memcheck, a memory error detector
==350== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==350== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==350== Command: ./test-eval inp.6.txt
==350== Parent PID: 349
==350== 
==350== Invalid read of size 4
==350==    at 0x40224A: compare_hands (eval.c:301)
==350==    by 0x403166: main (test-eval.c:124)
==350==  Address 0x5206ef8 is 0 bytes after a block of size 8 alloc'd
==350==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==350==    by 0x401190: add_card_to (deck-c4.c:30)
==350==    by 0x403904: hand_from_string (input.c:49)
==350==    by 0x40313A: main (test-eval.c:122)
==350== 
==350== Invalid read of size 4
==350==    at 0x40225D: compare_hands (eval.c:301)
==350==    by 0x403166: main (test-eval.c:124)
==350==  Address 0x5207368 is 0 bytes after a block of size 8 alloc'd
==350==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==350==    by 0x401190: add_card_to (deck-c4.c:30)
==350==    by 0x403904: hand_from_string (input.c:49)
==350==    by 0x40314F: main (test-eval.c:123)
==350== 
==350== Invalid read of size 4
==350==    at 0x40227B: compare_hands (eval.c:302)
==350==    by 0x403166: main (test-eval.c:124)
==350==  Address 0x5206ef8 is 0 bytes after a block of size 8 alloc'd
==350==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==350==    by 0x401190: add_card_to (deck-c4.c:30)
==350==    by 0x403904: hand_from_string (input.c:49)
==350==    by 0x40313A: main (test-eval.c:122)
==350== 
==350== Invalid read of size 4
==350==    at 0x40228E: compare_hands (eval.c:302)
==350==    by 0x403166: main (test-eval.c:124)
==350==  Address 0x5207368 is 0 bytes after a block of size 8 alloc'd
==350==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==350==    by 0x401190: add_card_to (deck-c4.c:30)
==350==    by 0x403904: hand_from_string (input.c:49)
==350==    by 0x40314F: main (test-eval.c:123)
==350== 
==350== 
==350== HEAP SUMMARY:
==350==     in use at exit: 0 bytes in 0 blocks
==350==   total heap usage: 898 allocs, 898 frees, 25,784 bytes allocated
==350== 
==350== All heap blocks were freed -- no leaks are possible
==350== 
==350== For counts of detected and suppressed errors, rerun with: -v
==350== ERROR SUMMARY: 192 errors from 4 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==355== Memcheck, a memory error detector
==355== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==355== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==355== Command: ./test-eval inp.7.txt
==355== Parent PID: 354
==355== 
==355== Invalid read of size 4
==355==    at 0x40224A: compare_hands (eval.c:301)
==355==    by 0x403166: main (test-eval.c:124)
==355==  Address 0x52071e8 is 0 bytes after a block of size 8 alloc'd
==355==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==355==    by 0x401190: add_card_to (deck-c4.c:30)
==355==    by 0x403904: hand_from_string (input.c:49)
==355==    by 0x40313A: main (test-eval.c:122)
==355== 
==355== Invalid read of size 4
==355==    at 0x40225D: compare_hands (eval.c:301)
==355==    by 0x403166: main (test-eval.c:124)
==355==  Address 0x5207728 is 0 bytes after a block of size 8 alloc'd
==355==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==355==    by 0x401190: add_card_to (deck-c4.c:30)
==355==    by 0x403904: hand_from_string (input.c:49)
==355==    by 0x40314F: main (test-eval.c:123)
==355== 
==355== Invalid read of size 4
==355==    at 0x40227B: compare_hands (eval.c:302)
==355==    by 0x403166: main (test-eval.c:124)
==355==  Address 0x52071e8 is 0 bytes after a block of size 8 alloc'd
==355==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==355==    by 0x401190: add_card_to (deck-c4.c:30)
==355==    by 0x403904: hand_from_string (input.c:49)
==355==    by 0x40313A: main (test-eval.c:122)
==355== 
==355== Invalid read of size 4
==355==    at 0x40228E: compare_hands (eval.c:302)
==355==    by 0x403166: main (test-eval.c:124)
==355==  Address 0x5207728 is 0 bytes after a block of size 8 alloc'd
==355==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==355==    by 0x401190: add_card_to (deck-c4.c:30)
==355==    by 0x403904: hand_from_string (input.c:49)
==355==    by 0x40314F: main (test-eval.c:123)
==355== 
==355== 
==355== HEAP SUMMARY:
==355==     in use at exit: 0 bytes in 0 blocks
==355==   total heap usage: 636 allocs, 636 frees, 21,404 bytes allocated
==355== 
==355== All heap blocks were freed -- no leaks are possible
==355== 
==355== For counts of detected and suppressed errors, rerun with: -v
==355== ERROR SUMMARY: 32 errors from 4 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==360== Memcheck, a memory error detector
==360== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==360== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==360== Command: ./test-eval inp.8.txt
==360== Parent PID: 359
==360== 
==360== Invalid read of size 4
==360==    at 0x40224A: compare_hands (eval.c:301)
==360==    by 0x403166: main (test-eval.c:124)
==360==  Address 0x5207048 is 0 bytes after a block of size 8 alloc'd
==360==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==360==    by 0x401190: add_card_to (deck-c4.c:30)
==360==    by 0x403904: hand_from_string (input.c:49)
==360==    by 0x40313A: main (test-eval.c:122)
==360== 
==360== Invalid read of size 4
==360==    at 0x40225D: compare_hands (eval.c:301)
==360==    by 0x403166: main (test-eval.c:124)
==360==  Address 0x52074b8 is 0 bytes after a block of size 8 alloc'd
==360==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==360==    by 0x401190: add_card_to (deck-c4.c:30)
==360==    by 0x403904: hand_from_string (input.c:49)
==360==    by 0x40314F: main (test-eval.c:123)
==360== 
==360== Invalid read of size 4
==360==    at 0x40227B: compare_hands (eval.c:302)
==360==    by 0x403166: main (test-eval.c:124)
==360==  Address 0x5207048 is 0 bytes after a block of size 8 alloc'd
==360==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==360==    by 0x401190: add_card_to (deck-c4.c:30)
==360==    by 0x403904: hand_from_string (input.c:49)
==360==    by 0x40313A: main (test-eval.c:122)
==360== 
==360== Invalid read of size 4
==360==    at 0x40228E: compare_hands (eval.c:302)
==360==    by 0x403166: main (test-eval.c:124)
==360==  Address 0x52074b8 is 0 bytes after a block of size 8 alloc'd
==360==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==360==    by 0x401190: add_card_to (deck-c4.c:30)
==360==    by 0x403904: hand_from_string (input.c:49)
==360==    by 0x40314F: main (test-eval.c:123)
==360== 
==360== 
==360== HEAP SUMMARY:
==360==     in use at exit: 0 bytes in 0 blocks
==360==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==360== 
==360== All heap blocks were freed -- no leaks are possible
==360== 
==360== For counts of detected and suppressed errors, rerun with: -v
==360== ERROR SUMMARY: 64 errors from 4 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_57_did_not_match
Line_63_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      |	 - Straight at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 						Ad Kh Qh Jh Js 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 1 of a kind (at index 0 / value A)   |	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==378== Memcheck, a memory error detector
==378== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==378== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==378== Command: ./test-eval inp.10.txt
==378== Parent PID: 377
==378== 
==378== Use of uninitialised value of size 8
==378==    at 0x400C0F: print_hand (deck.c:10)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Use of uninitialised value of size 8
==378==    at 0x400C29: print_hand (deck.c:11)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x4033A9: suit_letter (cards.c:68)
==378==    by 0x4033FE: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x40332C: value_letter (cards.c:49)
==378==    by 0x40340D: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x403346: value_letter (cards.c:53)
==378==    by 0x40340D: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x403355: value_letter (cards.c:56)
==378==    by 0x40340D: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x403364: value_letter (cards.c:57)
==378==    by 0x40340D: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x403373: value_letter (cards.c:58)
==378==    by 0x40340D: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Conditional jump or move depends on uninitialised value(s)
==378==    at 0x403382: value_letter (cards.c:59)
==378==    by 0x40340D: print_card (cards.c:77)
==378==    by 0x400C3A: print_hand (deck.c:12)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378== 
==378== Invalid read of size 4
==378==    at 0x400C0F: print_hand (deck.c:10)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==378== 
==378== 
==378== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==378==  Access not within mapped region at address 0x400001102
==378==    at 0x400C0F: print_hand (deck.c:10)
==378==    by 0x402F11: describe_hand (test-eval.c:74)
==378==    by 0x403111: main (test-eval.c:119)
==378==  If you believe this happened as a result of a stack
==378==  overflow in your program's main thread (unlikely but
==378==  possible), you can try to increase the size of the
==378==  main thread stack using the --main-stacksize= flag.
==378==  The main thread stack size used in this run was 8388608.
==378== 
==378== HEAP SUMMARY:
==378==     in use at exit: 896 bytes in 18 blocks
==378==   total heap usage: 154 allocs, 136 frees, 11,708 bytes allocated
==378== 
==378== LEAK SUMMARY:
==378==    definitely lost: 0 bytes in 0 blocks
==378==    indirectly lost: 0 bytes in 0 blocks
==378==      possibly lost: 0 bytes in 0 blocks
==378==    still reachable: 896 bytes in 18 blocks
==378==         suppressed: 0 bytes in 0 blocks
==378== Rerun with --leak-check=full to see details of leaked memory
==378== 
==378== For counts of detected and suppressed errors, rerun with: -v
==378== Use --track-origins=yes to see where uninitialised values come from
==378== ERROR SUMMARY: 18 errors from 10 contexts (suppressed: 0 from 0)

Overall Grade: F
