Grading at Sun Aug 25 15:56:44 UTC 2019
Compiling your code
rm -f test poker cards.o my-test-main.o *~
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o deck.o deck.c
cc -ggdb3 -Wall -Werror -pedantic -std=gnu99   -c -o cards.o cards.c
gcc -o test-eval -ggdb3 deck.o deck-c4.o eval-c4.o eval.o test-eval.o cards.o input.o future.o
Testcase 1: Trying hands with nothing
Valgrind returned an error status
==141== Memcheck, a memory error detector
==141== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==141== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==141== Command: ./test-eval inp.1.txt
==141== Parent PID: 140
==141== 
==141== Use of uninitialised value of size 8
==141==    at 0x400C01: print_hand (deck.c:10)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Use of uninitialised value of size 8
==141==    at 0x400C1B: print_hand (deck.c:11)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x4032B9: suit_letter (cards.c:68)
==141==    by 0x40330E: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x40323C: value_letter (cards.c:49)
==141==    by 0x40331D: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x403256: value_letter (cards.c:53)
==141==    by 0x40331D: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x403265: value_letter (cards.c:56)
==141==    by 0x40331D: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x403274: value_letter (cards.c:57)
==141==    by 0x40331D: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x403283: value_letter (cards.c:58)
==141==    by 0x40331D: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Conditional jump or move depends on uninitialised value(s)
==141==    at 0x403292: value_letter (cards.c:59)
==141==    by 0x40331D: print_card (cards.c:77)
==141==    by 0x400C2C: print_hand (deck.c:12)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141== 
==141== Invalid read of size 4
==141==    at 0x400C01: print_hand (deck.c:10)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==141== 
==141== 
==141== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==141==  Access not within mapped region at address 0x400001102
==141==    at 0x400C01: print_hand (deck.c:10)
==141==    by 0x402E21: describe_hand (test-eval.c:74)
==141==    by 0x403001: main (test-eval.c:116)
==141==  If you believe this happened as a result of a stack
==141==  overflow in your program's main thread (unlikely but
==141==  possible), you can try to increase the size of the
==141==  main thread stack using the --main-stacksize= flag.
==141==  The main thread stack size used in this run was 8388608.
==141== 
==141== HEAP SUMMARY:
==141==     in use at exit: 896 bytes in 18 blocks
==141==   total heap usage: 32 allocs, 14 frees, 9,376 bytes allocated
==141== 
==141== LEAK SUMMARY:
==141==    definitely lost: 0 bytes in 0 blocks
==141==    indirectly lost: 0 bytes in 0 blocks
==141==      possibly lost: 0 bytes in 0 blocks
==141==    still reachable: 896 bytes in 18 blocks
==141==         suppressed: 0 bytes in 0 blocks
==141== Rerun with --leak-check=full to see details of leaked memory
==141== 
==141== For counts of detected and suppressed errors, rerun with: -v
==141== Use --track-origins=yes to see where uninitialised values come from
==141== ERROR SUMMARY: 18 errors from 10 contexts (suppressed: 0 from 0)
Testcase 2: Trying hands with pairs
Valgrind returned an error status
==146== Memcheck, a memory error detector
==146== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==146== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==146== Command: ./test-eval inp.2.txt
==146== Parent PID: 145
==146== 
==146== Invalid read of size 4
==146==    at 0x40215A: compare_hands (eval.c:266)
==146==    by 0x403076: main (test-eval.c:124)
==146==  Address 0x5208438 is 0 bytes after a block of size 8 alloc'd
==146==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==146==    by 0x401182: add_card_to (deck-c4.c:30)
==146==    by 0x403814: hand_from_string (input.c:49)
==146==    by 0x40304A: main (test-eval.c:122)
==146== 
==146== Invalid read of size 4
==146==    at 0x40216D: compare_hands (eval.c:266)
==146==    by 0x403076: main (test-eval.c:124)
==146==  Address 0x52088a8 is 0 bytes after a block of size 8 alloc'd
==146==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==146==    by 0x401182: add_card_to (deck-c4.c:30)
==146==    by 0x403814: hand_from_string (input.c:49)
==146==    by 0x40305F: main (test-eval.c:123)
==146== 
==146== Invalid read of size 4
==146==    at 0x40218B: compare_hands (eval.c:267)
==146==    by 0x403076: main (test-eval.c:124)
==146==  Address 0x5208438 is 0 bytes after a block of size 8 alloc'd
==146==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==146==    by 0x401182: add_card_to (deck-c4.c:30)
==146==    by 0x403814: hand_from_string (input.c:49)
==146==    by 0x40304A: main (test-eval.c:122)
==146== 
==146== Invalid read of size 4
==146==    at 0x40219E: compare_hands (eval.c:267)
==146==    by 0x403076: main (test-eval.c:124)
==146==  Address 0x52088a8 is 0 bytes after a block of size 8 alloc'd
==146==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==146==    by 0x401182: add_card_to (deck-c4.c:30)
==146==    by 0x403814: hand_from_string (input.c:49)
==146==    by 0x40305F: main (test-eval.c:123)
==146== 
==146== 
==146== HEAP SUMMARY:
==146==     in use at exit: 0 bytes in 0 blocks
==146==   total heap usage: 232 allocs, 232 frees, 13,028 bytes allocated
==146== 
==146== All heap blocks were freed -- no leaks are possible
==146== 
==146== For counts of detected and suppressed errors, rerun with: -v
==146== ERROR SUMMARY: 32 errors from 4 contexts (suppressed: 0 from 0)
Testcase 3: Trying hands with 2 pairs
Valgrind returned an error status
==151== Memcheck, a memory error detector
==151== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==151== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==151== Command: ./test-eval inp.3.txt
==151== Parent PID: 150
==151== 
==151== Invalid read of size 4
==151==    at 0x40215A: compare_hands (eval.c:266)
==151==    by 0x403076: main (test-eval.c:124)
==151==  Address 0x5206e18 is 0 bytes after a block of size 8 alloc'd
==151==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==151==    by 0x401182: add_card_to (deck-c4.c:30)
==151==    by 0x403814: hand_from_string (input.c:49)
==151==    by 0x40304A: main (test-eval.c:122)
==151== 
==151== Invalid read of size 4
==151==    at 0x40216D: compare_hands (eval.c:266)
==151==    by 0x403076: main (test-eval.c:124)
==151==  Address 0x52071c8 is 0 bytes after a block of size 8 alloc'd
==151==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==151==    by 0x401182: add_card_to (deck-c4.c:30)
==151==    by 0x403814: hand_from_string (input.c:49)
==151==    by 0x40305F: main (test-eval.c:123)
==151== 
==151== Invalid read of size 4
==151==    at 0x40218B: compare_hands (eval.c:267)
==151==    by 0x403076: main (test-eval.c:124)
==151==  Address 0x5206e18 is 0 bytes after a block of size 8 alloc'd
==151==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==151==    by 0x401182: add_card_to (deck-c4.c:30)
==151==    by 0x403814: hand_from_string (input.c:49)
==151==    by 0x40304A: main (test-eval.c:122)
==151== 
==151== Invalid read of size 4
==151==    at 0x40219E: compare_hands (eval.c:267)
==151==    by 0x403076: main (test-eval.c:124)
==151==  Address 0x52071c8 is 0 bytes after a block of size 8 alloc'd
==151==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==151==    by 0x401182: add_card_to (deck-c4.c:30)
==151==    by 0x403814: hand_from_string (input.c:49)
==151==    by 0x40305F: main (test-eval.c:123)
==151== 
==151== 
==151== HEAP SUMMARY:
==151==     in use at exit: 0 bytes in 0 blocks
==151==   total heap usage: 544 allocs, 544 frees, 18,344 bytes allocated
==151== 
==151== All heap blocks were freed -- no leaks are possible
==151== 
==151== For counts of detected and suppressed errors, rerun with: -v
==151== ERROR SUMMARY: 80 errors from 4 contexts (suppressed: 0 from 0)
Testcase 4: Trying hands with 3 of a kind
Valgrind returned an error status
==156== Memcheck, a memory error detector
==156== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==156== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==156== Command: ./test-eval inp.4.txt
==156== Parent PID: 155
==156== 
==156== Invalid read of size 4
==156==    at 0x40215A: compare_hands (eval.c:266)
==156==    by 0x403076: main (test-eval.c:124)
==156==  Address 0x52082f8 is 0 bytes after a block of size 8 alloc'd
==156==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==156==    by 0x401182: add_card_to (deck-c4.c:30)
==156==    by 0x403814: hand_from_string (input.c:49)
==156==    by 0x40304A: main (test-eval.c:122)
==156== 
==156== Invalid read of size 4
==156==    at 0x40216D: compare_hands (eval.c:266)
==156==    by 0x403076: main (test-eval.c:124)
==156==  Address 0x5208768 is 0 bytes after a block of size 8 alloc'd
==156==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==156==    by 0x401182: add_card_to (deck-c4.c:30)
==156==    by 0x403814: hand_from_string (input.c:49)
==156==    by 0x40305F: main (test-eval.c:123)
==156== 
==156== Invalid read of size 4
==156==    at 0x40218B: compare_hands (eval.c:267)
==156==    by 0x403076: main (test-eval.c:124)
==156==  Address 0x52082f8 is 0 bytes after a block of size 8 alloc'd
==156==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==156==    by 0x401182: add_card_to (deck-c4.c:30)
==156==    by 0x403814: hand_from_string (input.c:49)
==156==    by 0x40304A: main (test-eval.c:122)
==156== 
==156== Invalid read of size 4
==156==    at 0x40219E: compare_hands (eval.c:267)
==156==    by 0x403076: main (test-eval.c:124)
==156==  Address 0x5208768 is 0 bytes after a block of size 8 alloc'd
==156==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==156==    by 0x401182: add_card_to (deck-c4.c:30)
==156==    by 0x403814: hand_from_string (input.c:49)
==156==    by 0x40305F: main (test-eval.c:123)
==156== 
==156== 
==156== HEAP SUMMARY:
==156==     in use at exit: 0 bytes in 0 blocks
==156==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==156== 
==156== All heap blocks were freed -- no leaks are possible
==156== 
==156== For counts of detected and suppressed errors, rerun with: -v
==156== ERROR SUMMARY: 64 errors from 4 contexts (suppressed: 0 from 0)
Testcase 5: Trying hands with straights
Valgrind returned an error status
==161== Memcheck, a memory error detector
==161== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==161== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==161== Command: ./test-eval inp.5.txt
==161== Parent PID: 160
==161== 
==161== Use of uninitialised value of size 8
==161==    at 0x400C01: print_hand (deck.c:10)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Use of uninitialised value of size 8
==161==    at 0x400C1B: print_hand (deck.c:11)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x4032B9: suit_letter (cards.c:68)
==161==    by 0x40330E: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x40323C: value_letter (cards.c:49)
==161==    by 0x40331D: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x403256: value_letter (cards.c:53)
==161==    by 0x40331D: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x403265: value_letter (cards.c:56)
==161==    by 0x40331D: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x403274: value_letter (cards.c:57)
==161==    by 0x40331D: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x403283: value_letter (cards.c:58)
==161==    by 0x40331D: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Conditional jump or move depends on uninitialised value(s)
==161==    at 0x403292: value_letter (cards.c:59)
==161==    by 0x40331D: print_card (cards.c:77)
==161==    by 0x400C2C: print_hand (deck.c:12)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161== 
==161== Invalid read of size 4
==161==    at 0x400C01: print_hand (deck.c:10)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==161== 
==161== 
==161== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==161==  Access not within mapped region at address 0x400001102
==161==    at 0x400C01: print_hand (deck.c:10)
==161==    by 0x402E21: describe_hand (test-eval.c:74)
==161==    by 0x403001: main (test-eval.c:116)
==161==  If you believe this happened as a result of a stack
==161==  overflow in your program's main thread (unlikely but
==161==  possible), you can try to increase the size of the
==161==  main thread stack using the --main-stacksize= flag.
==161==  The main thread stack size used in this run was 8388608.
==161== 
==161== HEAP SUMMARY:
==161==     in use at exit: 864 bytes in 16 blocks
==161==   total heap usage: 78 allocs, 62 frees, 10,080 bytes allocated
==161== 
==161== LEAK SUMMARY:
==161==    definitely lost: 0 bytes in 0 blocks
==161==    indirectly lost: 0 bytes in 0 blocks
==161==      possibly lost: 0 bytes in 0 blocks
==161==    still reachable: 864 bytes in 16 blocks
==161==         suppressed: 0 bytes in 0 blocks
==161== Rerun with --leak-check=full to see details of leaked memory
==161== 
==161== For counts of detected and suppressed errors, rerun with: -v
==161== Use --track-origins=yes to see where uninitialised values come from
==161== ERROR SUMMARY: 18 errors from 10 contexts (suppressed: 0 from 0)
Testcase 6: Trying hands with flushes
Valgrind returned an error status
==166== Memcheck, a memory error detector
==166== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==166== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==166== Command: ./test-eval inp.6.txt
==166== Parent PID: 165
==166== 
==166== Invalid read of size 4
==166==    at 0x40215A: compare_hands (eval.c:266)
==166==    by 0x403076: main (test-eval.c:124)
==166==  Address 0x5206ef8 is 0 bytes after a block of size 8 alloc'd
==166==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==166==    by 0x401182: add_card_to (deck-c4.c:30)
==166==    by 0x403814: hand_from_string (input.c:49)
==166==    by 0x40304A: main (test-eval.c:122)
==166== 
==166== Invalid read of size 4
==166==    at 0x40216D: compare_hands (eval.c:266)
==166==    by 0x403076: main (test-eval.c:124)
==166==  Address 0x5207368 is 0 bytes after a block of size 8 alloc'd
==166==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==166==    by 0x401182: add_card_to (deck-c4.c:30)
==166==    by 0x403814: hand_from_string (input.c:49)
==166==    by 0x40305F: main (test-eval.c:123)
==166== 
==166== Invalid read of size 4
==166==    at 0x40218B: compare_hands (eval.c:267)
==166==    by 0x403076: main (test-eval.c:124)
==166==  Address 0x5206ef8 is 0 bytes after a block of size 8 alloc'd
==166==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==166==    by 0x401182: add_card_to (deck-c4.c:30)
==166==    by 0x403814: hand_from_string (input.c:49)
==166==    by 0x40304A: main (test-eval.c:122)
==166== 
==166== Invalid read of size 4
==166==    at 0x40219E: compare_hands (eval.c:267)
==166==    by 0x403076: main (test-eval.c:124)
==166==  Address 0x5207368 is 0 bytes after a block of size 8 alloc'd
==166==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==166==    by 0x401182: add_card_to (deck-c4.c:30)
==166==    by 0x403814: hand_from_string (input.c:49)
==166==    by 0x40305F: main (test-eval.c:123)
==166== 
==166== 
==166== HEAP SUMMARY:
==166==     in use at exit: 0 bytes in 0 blocks
==166==   total heap usage: 898 allocs, 898 frees, 25,784 bytes allocated
==166== 
==166== All heap blocks were freed -- no leaks are possible
==166== 
==166== For counts of detected and suppressed errors, rerun with: -v
==166== ERROR SUMMARY: 192 errors from 4 contexts (suppressed: 0 from 0)
Testcase 7: Trying hands with full houses
Valgrind returned an error status
==171== Memcheck, a memory error detector
==171== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==171== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==171== Command: ./test-eval inp.7.txt
==171== Parent PID: 170
==171== 
==171== Invalid read of size 4
==171==    at 0x40215A: compare_hands (eval.c:266)
==171==    by 0x403076: main (test-eval.c:124)
==171==  Address 0x52071e8 is 0 bytes after a block of size 8 alloc'd
==171==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==171==    by 0x401182: add_card_to (deck-c4.c:30)
==171==    by 0x403814: hand_from_string (input.c:49)
==171==    by 0x40304A: main (test-eval.c:122)
==171== 
==171== Invalid read of size 4
==171==    at 0x40216D: compare_hands (eval.c:266)
==171==    by 0x403076: main (test-eval.c:124)
==171==  Address 0x5207728 is 0 bytes after a block of size 8 alloc'd
==171==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==171==    by 0x401182: add_card_to (deck-c4.c:30)
==171==    by 0x403814: hand_from_string (input.c:49)
==171==    by 0x40305F: main (test-eval.c:123)
==171== 
==171== Invalid read of size 4
==171==    at 0x40218B: compare_hands (eval.c:267)
==171==    by 0x403076: main (test-eval.c:124)
==171==  Address 0x52071e8 is 0 bytes after a block of size 8 alloc'd
==171==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==171==    by 0x401182: add_card_to (deck-c4.c:30)
==171==    by 0x403814: hand_from_string (input.c:49)
==171==    by 0x40304A: main (test-eval.c:122)
==171== 
==171== Invalid read of size 4
==171==    at 0x40219E: compare_hands (eval.c:267)
==171==    by 0x403076: main (test-eval.c:124)
==171==  Address 0x5207728 is 0 bytes after a block of size 8 alloc'd
==171==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==171==    by 0x401182: add_card_to (deck-c4.c:30)
==171==    by 0x403814: hand_from_string (input.c:49)
==171==    by 0x40305F: main (test-eval.c:123)
==171== 
==171== 
==171== HEAP SUMMARY:
==171==     in use at exit: 0 bytes in 0 blocks
==171==   total heap usage: 636 allocs, 636 frees, 21,404 bytes allocated
==171== 
==171== All heap blocks were freed -- no leaks are possible
==171== 
==171== For counts of detected and suppressed errors, rerun with: -v
==171== ERROR SUMMARY: 32 errors from 4 contexts (suppressed: 0 from 0)
Testcase 8: Trying hands with 4 of a kind
Valgrind returned an error status
==176== Memcheck, a memory error detector
==176== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==176== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==176== Command: ./test-eval inp.8.txt
==176== Parent PID: 175
==176== 
==176== Invalid read of size 4
==176==    at 0x40215A: compare_hands (eval.c:266)
==176==    by 0x403076: main (test-eval.c:124)
==176==  Address 0x5207048 is 0 bytes after a block of size 8 alloc'd
==176==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==176==    by 0x401182: add_card_to (deck-c4.c:30)
==176==    by 0x403814: hand_from_string (input.c:49)
==176==    by 0x40304A: main (test-eval.c:122)
==176== 
==176== Invalid read of size 4
==176==    at 0x40216D: compare_hands (eval.c:266)
==176==    by 0x403076: main (test-eval.c:124)
==176==  Address 0x52074b8 is 0 bytes after a block of size 8 alloc'd
==176==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==176==    by 0x401182: add_card_to (deck-c4.c:30)
==176==    by 0x403814: hand_from_string (input.c:49)
==176==    by 0x40305F: main (test-eval.c:123)
==176== 
==176== Invalid read of size 4
==176==    at 0x40218B: compare_hands (eval.c:267)
==176==    by 0x403076: main (test-eval.c:124)
==176==  Address 0x5207048 is 0 bytes after a block of size 8 alloc'd
==176==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==176==    by 0x401182: add_card_to (deck-c4.c:30)
==176==    by 0x403814: hand_from_string (input.c:49)
==176==    by 0x40304A: main (test-eval.c:122)
==176== 
==176== Invalid read of size 4
==176==    at 0x40219E: compare_hands (eval.c:267)
==176==    by 0x403076: main (test-eval.c:124)
==176==  Address 0x52074b8 is 0 bytes after a block of size 8 alloc'd
==176==    at 0x4C2DB8F: malloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==176==    by 0x401182: add_card_to (deck-c4.c:30)
==176==    by 0x403814: hand_from_string (input.c:49)
==176==    by 0x40305F: main (test-eval.c:123)
==176== 
==176== 
==176== HEAP SUMMARY:
==176==     in use at exit: 0 bytes in 0 blocks
==176==   total heap usage: 352 allocs, 352 frees, 15,296 bytes allocated
==176== 
==176== All heap blocks were freed -- no leaks are possible
==176== 
==176== For counts of detected and suppressed errors, rerun with: -v
==176== ERROR SUMMARY: 64 errors from 4 contexts (suppressed: 0 from 0)
Testcase 9: Trying hands with straight flushes
 Checking the output 
Line_54_did_not_match
Line_57_did_not_match
Line_63_did_not_match
Your file did not match the expected ouput
 - Output did not match, testcase failed
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 							As Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 							Kh Qh Jh 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
As Ks Qs Js 0s 9s 8s 						As Ks Qs Js 0s 9s 8s 
 - Flush in suit s						 - Flush in suit s
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value A)	 - The most of a kind is 1 of a kind (at index 0 / value A)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Kh Qh Jh 0h 9h 8h 7h 						Kh Qh Jh 0h 9h 8h 7h 
 - Flush in suit h						 - Flush in suit h
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - Straight flush at index 2					 - Straight flush at index 2
 - The most of a kind is 1 of a kind (at index 0 / value K)	 - The most of a kind is 1 of a kind (at index 0 / value K)
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH			 - evaluate_hand's ranking: STRAIGHT_FLUSH
 - 5 cards used for hand: Kh Qh Jh 0h 9h 			 - 5 cards used for hand: Kh Qh Jh 0h 9h 
Comparison : 							Comparison : 
--------------							--------------
Hand 1 wins!							Hand 1 wins!
============================					============================
Hand 1:								Hand 1:
--------							--------
Ac As Kc Ks Qs Js 0s 						Ac As Kc Ks Qs Js 0s 
 - Flush in suit s						 - Flush in suit s
 - Straight at index 0						 - Straight at index 0
 - Straight flush at index 1				      |	 - Straight at index 1
 - The most of a kind is 2 of a kind (at index 0 / value A)	 - The most of a kind is 2 of a kind (at index 0 / value A)
 - Secondary pair at index 2 (value K)				 - Secondary pair at index 2 (value K)
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      |	 - evaluate_hand's ranking: FLUSH
 - 5 cards used for hand: As Ks Qs Js 0s 			 - 5 cards used for hand: As Ks Qs Js 0s 
Hand 2:								Hand 2:
--------							--------
Ad Kh Qh Jh Js 0h 9h 						Ad Kh Qh Jh Js 0h 9h 
 - Flush in suit h						 - Flush in suit h
 - Straight at index 0					      <
 - Straight flush at index 1				      <
 - The most of a kind is 2 of a kind (at index 3 / value J)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: Kh Qh Jh 0h 9h 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Hand 1:							      <
--------						      <
Ah Kc 5h 4h 3h 2h 					      <
 - Flush in suit h					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5h 4h 3h 2h Ah 		      <
Hand 2:							      <
--------						      <
Ac 6c 5c 4c 3c 2c 					      <
 - Flush in suit c					      <
 - Straight flush at index 0					 - Straight flush at index 0
 - Straight flush at index 1					 - Straight flush at index 1
 - The most of a kind is 1 of a kind (at index 0 / value A)   |	 - The most of a kind is 2 of a kind (at index 3 / value J)
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5c 4c 3c 2c Ac 		      <
Comparison : 						      <
--------------						      <
Tie							      <
============================				      <
Hand 1:							      <
--------						      <
As Ks Qs Js 0s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair					      <
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: As Ks Qs Js 0s 		      <
Hand 2:							      <
--------						      <
As 5s 4s 3s 2s 						      <
 - Flush in suit s					      <
 - Straight flush at index 0				      <
 - The most of a kind is 1 of a kind (at index 0 / value A)   <
 - No secondary pair						 - No secondary pair
 - evaluate_hand's ranking: STRAIGHT_FLUSH		      <
 - 5 cards used for hand: 5s 4s 3s 2s As 		      <
Comparison : 						      <
--------------						      <
Hand 1 wins!						      <
============================				      <
Testcase 10: Trying each type of hand ranking
Valgrind returned an error status
==194== Memcheck, a memory error detector
==194== Copyright (C) 2002-2015, and GNU GPL'd, by Julian Seward et al.
==194== Using Valgrind-3.11.0 and LibVEX; rerun with -h for copyright info
==194== Command: ./test-eval inp.10.txt
==194== Parent PID: 193
==194== 
==194== Use of uninitialised value of size 8
==194==    at 0x400C01: print_hand (deck.c:10)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Use of uninitialised value of size 8
==194==    at 0x400C1B: print_hand (deck.c:11)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x4032B9: suit_letter (cards.c:68)
==194==    by 0x40330E: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x40323C: value_letter (cards.c:49)
==194==    by 0x40331D: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x403256: value_letter (cards.c:53)
==194==    by 0x40331D: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x403265: value_letter (cards.c:56)
==194==    by 0x40331D: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x403274: value_letter (cards.c:57)
==194==    by 0x40331D: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x403283: value_letter (cards.c:58)
==194==    by 0x40331D: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Conditional jump or move depends on uninitialised value(s)
==194==    at 0x403292: value_letter (cards.c:59)
==194==    by 0x40331D: print_card (cards.c:77)
==194==    by 0x400C2C: print_hand (deck.c:12)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194== 
==194== Invalid read of size 4
==194==    at 0x400C01: print_hand (deck.c:10)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194==  Address 0x400001102 is not stack'd, malloc'd or (recently) free'd
==194== 
==194== 
==194== Process terminating with default action of signal 11 (SIGSEGV): dumping core
==194==  Access not within mapped region at address 0x400001102
==194==    at 0x400C01: print_hand (deck.c:10)
==194==    by 0x402E21: describe_hand (test-eval.c:74)
==194==    by 0x403021: main (test-eval.c:119)
==194==  If you believe this happened as a result of a stack
==194==  overflow in your program's main thread (unlikely but
==194==  possible), you can try to increase the size of the
==194==  main thread stack using the --main-stacksize= flag.
==194==  The main thread stack size used in this run was 8388608.
==194== 
==194== HEAP SUMMARY:
==194==     in use at exit: 896 bytes in 18 blocks
==194==   total heap usage: 154 allocs, 136 frees, 11,708 bytes allocated
==194== 
==194== LEAK SUMMARY:
==194==    definitely lost: 0 bytes in 0 blocks
==194==    indirectly lost: 0 bytes in 0 blocks
==194==      possibly lost: 0 bytes in 0 blocks
==194==    still reachable: 896 bytes in 18 blocks
==194==         suppressed: 0 bytes in 0 blocks
==194== Rerun with --leak-check=full to see details of leaked memory
==194== 
==194== For counts of detected and suppressed errors, rerun with: -v
==194== Use --track-origins=yes to see where uninitialised values come from
==194== ERROR SUMMARY: 18 errors from 10 contexts (suppressed: 0 from 0)

Overall Grade: F
